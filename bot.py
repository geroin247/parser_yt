import telebot
from telebot.apihelper import ApiTelegramException
import os
import downloader
import config
import keyboards
import json
import logging
from pathlib import Path
from database import db_manager
import yt_dlp

# –í–ê–ñ–ù–û: –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω—É–∂–Ω—ã –ø—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å @username
# –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ ID –∫–∞–Ω–∞–ª–æ–≤, –Ω–æ —Ç–æ–≥–¥–∞ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
REQUIRED_CHANNELS = [
    {"id": "-1002397757887", "name": "–ù–ê–†–û–î | –†–æ–±–æ—Ç–∞ –ö–∏—ó–≤üá∫üá¶", "url": "https://t.me/+vPRsg7xEfb4yZWEy"},
    {"id": "-1002400023551", "name": "–ù–ê–†–û–î | –í—ñ–¥–¥–∞–ª–µ–Ω–∞ —Ä–æ–±–æ—Ç–∞üá∫üá¶", "url": "https://t.me/+lB3HA50hyLIxNGNi"},
    {"id": "-1002649530761", "name": "–ù–ê–†–û–î | –†–æ–±–æ—Ç–∞ –í–∏—à–Ω–µ–≤–µüá∫üá¶", "url": "https://t.me/+GfUSmrF1tLwyMGQ6"},
]

bot = telebot.TeleBot(config.token)
adm_state = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

def safe_text(text):
    if text is None:
        return ""
    return str(text).encode("utf-8", "ignore").decode("utf-8")

def extract_user_data(user):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Telegram User"""
    return {
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'language_code': user.language_code,
        'is_bot': user.is_bot,
        'is_premium': getattr(user, 'is_premium', False)  # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    }

def check_subscriptions(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã"""
    unsubscribed = []
    
    for channel in REQUIRED_CHANNELS:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –∫–∞–Ω–∞–ª–∞
            member = bot.get_chat_member(channel['id'], user_id)
            
            logging.info(f"User {user_id} status in channel {channel['id']}: {member.status}")
            
            if member.status in ["left", "kicked"]:
                logging.info(f"User {user_id} is not subscribed to {channel['name']}")
                unsubscribed.append(channel)
            else:
                logging.info(f"User {user_id} is subscribed to {channel['name']}")
                
        except ApiTelegramException as e:
            logging.warning(f"API Error while checking {channel['id']} for user {user_id}: {e}")
            
            if "user not found" in str(e).lower() or "not found" in str(e).lower():
                logging.info(f"User {user_id} not found in channel {channel['name']} - not subscribed")
                unsubscribed.append(channel)
            elif "bot is not a member" in str(e).lower() or "forbidden" in str(e).lower():
                logging.error(f"Bot is not admin in channel {channel['name']}. Cannot check subscription.")
                unsubscribed.append(channel)
            else:
                logging.error(f"Unknown API error for channel {channel['name']}: {e}")
                unsubscribed.append(channel)
                
        except Exception as e:
            logging.error(f"Unexpected error while checking {channel['id']} for user {user_id}: {e}")
            unsubscribed.append(channel)
    
    logging.info(f"User {user_id} unsubscribed channels: {len(unsubscribed)}")
    return unsubscribed

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logging.info(f"Start command from user {user_id} (@{username})")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = extract_user_data(message.from_user)
    db_manager.save_user(user_data)
    
    unsubscribed = check_subscriptions(user_id)
    if unsubscribed:
        send_subscription_message(user_id, unsubscribed)
    else:
        bot.send_message(user_id, safe_text('*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.*'), 
                        parse_mode="markdown", reply_markup=keyboards.main_menu())

def send_subscription_message(user_id, unsubscribed_channels):
    text = "‚ö†Ô∏è *–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:*\n\n"
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    for i, ch in enumerate(unsubscribed_channels, 1):
        text += f"{i}. [{ch['name']}]({ch['url']})\n"
        markup.add(telebot.types.InlineKeyboardButton(f"üì¢ {ch['name']}", url=ch['url']))
    
    text += "\n_–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:_"
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
    
    try:
        bot.send_message(user_id, safe_text(text), parse_mode="markdown", reply_markup=markup, disable_web_page_preview=True)
    except Exception as e:
        logging.error(f"Error sending subscription message: {e}")
        # Fallback –±–µ–∑ markdown
        simple_text = "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã."
        bot.send_message(user_id, simple_text, reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_data = extract_user_data(message.from_user)
    db_manager.save_user(user_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    unsubscribed = check_subscriptions(user_id)
    if unsubscribed:
        send_subscription_message(user_id, unsubscribed)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
    if message.text == 'panda' and user_id in config.admin_ids:
        bot.send_message(user_id, safe_text('ü•∞ *–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!*'), 
                        parse_mode='markdown', reply_markup=keyboards.admin_menu())
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞
    if user_id in adm_state:
        handle_admin_state(message, user_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube —Å—Å—ã–ª–æ–∫
    if 'youtube.com' in message.text.lower() or 'youtu.be' in message.text.lower():
        download_youtube_video(message, user_id)
    elif message.text == '‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.send_message(user_id, safe_text('*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*'), 
                        parse_mode='markdown', reply_markup=keyboards.main_menu())
    else:
        bot.send_message(user_id, safe_text('*–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.*'), 
                        parse_mode='markdown', reply_markup=keyboards.main_menu())

def handle_admin_state(message, user_id):
    state = adm_state[user_id]
    
    if state['state'] == 'change':
        try:
            config.settings[state['who']] = message.text
            with open('settings.json', 'w', encoding='utf-8') as f:
                json.dump(config.settings, f, indent=4, ensure_ascii=False)
            del adm_state[user_id]
            bot.send_message(user_id, safe_text('*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!*'), 
                           parse_mode='markdown', reply_markup=keyboards.admin_menu())
        except Exception as e:
            logging.error(f"Error saving settings: {e}")
            bot.send_message(user_id, safe_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.'))
    
    elif state['state'] == 'sendall':
        good, bad = 0, 0
        all_users = db_manager.get_all_users()
        
        for user in all_users:
            try:
                bot.send_message(user['user_id'], safe_text(message.text), parse_mode='markdown')
                good += 1
            except Exception as e:
                logging.warning(f"Failed to send message to {user['user_id']}: {e}")
                bad += 1
        
        del adm_state[user_id]
        bot.send_message(user_id, safe_text(f'*–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:*\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {good}\n‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {bad}'), 
                        parse_mode='markdown', reply_markup=keyboards.admin_menu())

def get_video_title(url):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ URL"""
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            return info.get('title', 'Unknown')
    except:
        return 'Unknown'

def download_youtube_video(message, user_id):
    msg = bot.send_message(user_id, safe_text('‚è≥ _–ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞..._'), parse_mode='markdown')
    download_obj = None
    video_title = None
    file_size = None
    success = False
    
    try:
        logging.info(f"Starting download for user {user_id}: {message.text}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        video_title = get_video_title(message.text)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        download_obj = downloader.Download(message.text)
        video_path = download_obj.file
        
        if not video_path or not os.path.exists(video_path):
            raise FileNotFoundError("–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(video_path)
        if file_size > 50 * 1024 * 1024:  # 50MB
            raise Exception("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(safe_text('‚úÖ _–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª..._'), 
                             user_id, msg.message_id, parse_mode='markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(video_path, 'rb') as video:
            bot.send_video(
                chat_id=message.chat.id,
                video=video,
                caption="–ù–µ –≤—Å—Ç–∏–≥ –∑–∞–Ω—É–¥—å–≥—É–≤–∞—Ç–∏? \n\n–ù–∞—Å–æ–ª–æ–¥–∂—É–π—Å—è, –±—Ä–æüòé",
                supports_streaming=True,  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                width=1920,  # –®–∏—Ä–∏–Ω–∞ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞)
                height=1080,  # –í—ã—Å–æ—Ç–∞ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞)
                duration=None  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞)
            )
        
        success = True
        logging.info(f"Successfully sent video to user {user_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            bot.delete_message(user_id, msg.message_id)
        except:
            pass
            
    except Exception as e:
        error_msg = str(e)
        logging.error(f"Download error for user {user_id}: {error_msg}")
        
        try:
            bot.edit_message_text(safe_text(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—á—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ: {error_msg}'), 
                                 user_id, msg.message_id)
        except:
            bot.send_message(user_id, safe_text(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—á—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ: {error_msg}'))
    
    finally:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_manager.add_download(
            user_id=user_id,
            video_url=message.text,
            video_title=video_title,
            file_size=file_size,
            success=success
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if download_obj:
            try:
                download_obj.cleanup()
            except:
                pass

@bot.callback_query_handler(func=lambda call: True)
def callbacks(call):
    user_id = call.from_user.id
    
    try:
        if call.data == 'check_subscription':
            unsubscribed = check_subscriptions(user_id)
            if unsubscribed:
                bot.answer_callback_query(call.id, f"‚ùå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!\n–û—Å—Ç–∞–ª–æ—Å—å: {len(unsubscribed)}", show_alert=True)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
                send_subscription_message(user_id, unsubscribed)
                try:
                    bot.delete_message(user_id, call.message.message_id)
                except:
                    pass
            else:
                bot.answer_callback_query(call.id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                bot.edit_message_text(safe_text('*üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.'), 
                                    user_id, call.message.message_id, 
                                    parse_mode='markdown', reply_markup=keyboards.main_menu())
        
        elif call.data == 'menu':
            bot.edit_message_text(safe_text('*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*'), 
                                user_id, call.message.message_id, 
                                parse_mode='markdown', reply_markup=keyboards.main_menu())
        
        elif call.data == 'information':
            bot.edit_message_text(safe_text('‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*'), 
                                user_id, call.message.message_id, 
                                parse_mode='markdown', reply_markup=keyboards.information())
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ callback'–∏
        elif call.data in ['base_export_json', 'base_export_sql', 'base_settings', 'bot_statistics', 
                          'change_channel_id', 'change_channel_url', 'sendall']:
            handle_admin_callbacks(call)
            
    except Exception as e:
        logging.error(f"Callback error: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def handle_admin_callbacks(call):
    user_id = call.from_user.id
    
    if user_id not in config.admin_ids:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if call.data == 'base_export_json':
        try:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
            json_file = db_manager.export_to_json()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = db_manager.get_statistics()
            
            with open(json_file, 'rb') as f:
                bot.send_document(
                    user_id, 
                    f,
                    caption=f"üìä *–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (JSON)*\n\n"
                           f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
                           f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_users', 0)}\n"
                           f"üì• –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: {stats.get('total_downloads', 0)}\n"
                           f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_downloads', 0)}\n"
                           f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('success_rate', 0):.1f}%",
                    parse_mode='markdown'
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(json_file)
            
        except Exception as e:
            logging.error(f"JSON export error: {e}")
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ JSON")
    
    elif call.data == 'base_export_sql':
        try:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ SQL
            sql_file = db_manager.export_to_sql()
            
            if sql_file:
                with open(sql_file, 'rb') as f:
                    bot.send_document(
                        user_id, 
                        f,
                        caption="üóÑÔ∏è *–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQL)*\n\n–ü–æ–ª–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ö–µ–º–æ–π –∏ –¥–∞–Ω–Ω—ã–º–∏",
                        parse_mode='markdown'
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(sql_file)
            else:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SQL —ç–∫—Å–ø–æ—Ä—Ç–∞")
            
        except Exception as e:
            logging.error(f"SQL export error: {e}")
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ SQL")
    
    elif call.data == 'bot_statistics':
        try:
            stats = db_manager.get_statistics()
            
            stats_text = f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_users', 0)}

üì• *–ó–∞–≥—Ä—É–∑–∫–∏:*
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_downloads', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_downloads', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('success_rate', 0):.1f}%

üèÜ *–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*"""

            top_users = stats.get('top_users', [])
            for i, user in enumerate(top_users[:5], 1):
                name = user.get('first_name', '') or user.get('username', f"ID{user['user_id']}")
                stats_text += f"\n{i}. {name} - {user['download_count']} –∑–∞–≥—Ä—É–∑–æ–∫"
            
            bot.send_message(user_id, safe_text(stats_text), parse_mode='markdown')
            
        except Exception as e:
            logging.error(f"Statistics error: {e}")
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    elif call.data == 'base_settings':
        try:
            settings_text = json.dumps(config.settings, indent=2, ensure_ascii=False)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            settings_file = f'settings_export_{user_id}.json'
            with open(settings_file, 'w', encoding='utf-8') as f:
                f.write(settings_text)
            
            with open(settings_file, 'rb') as f:
                bot.send_document(
                    user_id,
                    f,
                    caption="‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(settings_file)
            
        except Exception as e:
            logging.error(f"Settings export error: {e}")
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    elif call.data == 'change_channel_id':
        adm_state[user_id] = {'state': 'change', 'who': 'channel_id'}
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π ID –∫–∞–Ω–∞–ª–∞:")
    
    elif call.data == 'change_channel_url':
        adm_state[user_id] = {'state': 'change', 'who': 'channel_url'}
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:")
    
    elif call.data == 'sendall':
        adm_state[user_id] = {'state': 'sendall'}
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    Path("downloads").mkdir(exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_manager.init_database()
    
    logging.info("Bot starting...")
    try:
        bot.remove_webhook()
        bot.infinity_polling(none_stop=True, timeout=10, long_polling_timeout=5)
    except Exception as e:
        logging.error(f"Bot crashed: {e}")
        raise